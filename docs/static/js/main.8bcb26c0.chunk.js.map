{"version":3,"sources":["features/items/itemSlice.js","features/items/Items.js","features/days/daySlice.js","components/TabPanel.js","features/days/Days.js","features/schedule/Schedule.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["itemSlice","createSlice","name","initialState","JSON","parse","localStorage","getItem","reducers","add","state","action","item","payload","id","setItem","stringify","actions","selectItems","items","Items","useSelector","dispatch","useDispatch","onClick","color","uuid","Button","Object","keys","map","key","TextField","label","value","onChange","event","target","onChangeComplete","hex","daySlice","day","selectDays","days","TabPanel","props","children","index","other","style","display","Typography","component","role","hidden","aria-labelledby","Box","p","daysOfWeek","a11yProps","Days","date","Date","dayofWeek","getDay","dayNames","useState","setDay","Tabs","e","newVal","aria-label","Tab","Day","del","nextDay","reduce","acc","curr","push","concat","itemId","order","type","parseInt","duration","SelectItem","marginLeft","open","setOpen","handleChange","InputLabel","Select","labelId","onClose","onOpen","MenuItem","lastSlotId","audio","Audio","Schedule","foundSlot","currentTime","setTime","setTimeout","sort","a","b","prevTime","startTime","daysWithStartTime","elapsed","getHours","getMinutes","slot","find","i","play","get","height","padding","backgroundColor","s","Chip","App","tab","setTab","className","newValue","console","log","counterSlice","increment","decrement","incrementByAmount","configureStore","reducer","counter","counterReducer","itemReducer","dayReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bcb26c0.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const itemSlice = createSlice({\n  name: 'item',\n  initialState: JSON.parse(localStorage.getItem('items') || '{}'),\n  reducers: {\n    add: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      const item = action.payload;\n      state[item.id] = item;\n      localStorage.setItem('items', JSON.stringify(state))\n    }\n  },\n});\n\nexport const { add } = itemSlice.actions;\n\n// // The function below is called a thunk and allows us to perform async logic. It\n// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// // will call the thunk with the `dispatch` function as the first argument. Async\n// // code can then be executed and other actions can be dispatched\n// export const incrementAsync = amount => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectItems = state => state.items;\n\nexport default itemSlice.reducer;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, Button } from '@material-ui/core'\nimport { HuePicker } from 'react-color';\n\nimport uuid from 'uuid/v4';\nimport {\n  add, selectItems\n} from './itemSlice';\n\n// import styles from './index.module.css';\n\nexport default function Items() {\n  const items = useSelector(selectItems);\n  const dispatch = useDispatch();\n\n\n  return (\n    <div>\n      <h1>Add Items</h1>\n      <ul>\n        <li onClick={()=>dispatch(add({\n          name: 'Default Name',\n          color: 'blue',\n          id: uuid()\n        }))}><Button>+</Button></li>\n        {\n          Object.keys(items).map(id => {\n            const item = items[id];\n            return <li key={id}>\n              <div>\n                <TextField id={`name-${id}`} label=\"Name\" value={item.name} onChange={(event)=>dispatch(add({...item, name: event.target.value}))} />\n                <HuePicker\n                  color={ item.color }\n                  onChangeComplete={(color)=>dispatch(add({\n                    ...item, color: color.hex\n                  })) }\n                />\n              </div>\n            </li>\n          })\n        }\n      </ul>\n    </div>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const daySlice = createSlice({\n  name: 'days',\n  initialState: JSON.parse(localStorage.getItem('days') || `{\n    \"mon\": [],\n    \"tue\": [],\n    \"wed\": [],\n    \"thu\": [],\n    \"fri\": [],\n    \"sat\": [],\n    \"sun\": []\n  }`),\n  reducers: {\n    add: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      const { day, items } = action.payload;\n      state[day] = items;\n      localStorage.setItem('days', JSON.stringify(state))\n    },\n  },\n});\n\nexport const { add } = daySlice.actions;\n\n// // The function below is called a thunk and allows us to perform async logic. It\n// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// // will call the thunk with the `dispatch` function as the first argument. Async\n// // code can then be executed and other actions can be dispatched\n// export const incrementAsync = amount => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectDays = state => state.days;\n\nexport default daySlice.reducer;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport default function TabPanel(props) {\n  const { children, value, index, ...other } = props;\n  const style = (value === index ? {} : {display: 'none'});\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`wrapped-tabpanel-${index}`}\n      aria-labelledby={`wrapped-tab-${index}`}\n      {...other}\n    >\n      {<Box style={style} p={3}>{children}</Box>}\n    </Typography>\n  );\n}","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, Button, Select, MenuItem, InputLabel } from '@material-ui/core'\nimport { Tabs, Tab } from '@material-ui/core';\nimport uuid from 'uuid/v4';\nimport {\n  add, selectDays\n} from './daySlice';\nimport TabPanel from '../../components/TabPanel';\nimport { selectItems } from '../items/itemSlice';\nexport const daysOfWeek = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\nexport function a11yProps(index) {\n  return {\n    id: `wrapped-tab-${index}`,\n    'aria-controls': `wrapped-tabpanel-${index}`,\n    value: index,\n  };\n}\n\nexport default function Days() {\n  const date = new Date();\n  const days = useSelector(selectDays);\n  const dayofWeek = daysOfWeek[date.getDay()];\n  const dayNames = Object.keys(days);\n  const [ day, setDay ] = useState(dayofWeek);\n\n  return (\n    <div>\n      <h1>Change Days</h1>\n      <Tabs value={day} onChange={(e, newVal)=>setDay(newVal)} aria-label=\"simple tabs example\">\n        {\n          dayNames.map(name => {\n            return <Tab label={name} {...a11yProps(name)} />\n          })\n        }\n      </Tabs>\n      {\n        dayNames.map(name => <TabPanel key={name} value={day} index={name}>\n          <Day name={day} />\n        </TabPanel>)\n      }\n      \n    </div>\n  );\n}\n\nexport function Day({name}){\n  const days = useSelector(selectDays);\n  const items = useSelector(selectItems);\n  const dispatch = useDispatch();\n  const day = days[name];\n  const onChange = (item, del)=>{\n    const nextDay = day.reduce((acc, curr) => {\n      if(curr.id === item.id){\n        if(!del) acc.push(item);\n      } else {\n        acc.push(curr);\n      }\n      return acc;\n    }, []);\n    const action = add({\n      day: name,\n      items: nextDay,\n    });\n    dispatch(action)\n  }\n  return <div>\n    <h2>{`Set Day - ${name}`}</h2>\n    <ul>\n        <li><Button onClick={()=>dispatch(add({\n          day: name,\n          items: day.concat({\n            id: uuid(),\n            itemId: Object.keys(items)[0],\n          }),\n        }))}>+</Button></li>\n        {\n          day.map(item => {\n            return <li key={item.id}>\n              <div>\n                <TextField id={`order-${item.id}`} label=\"Order\" value={item.order} type=\"number\" onChange={(event)=>onChange({...item, order: parseInt(event.target.value, 10)})} />\n                <TextField id={`length-${item.id}`} label=\"Length in Minutes\" type=\"number\" value={item.duration} onChange={(event)=>onChange({...item, duration: parseInt(event.target.value, 10)})} />\n                <SelectItem id={item.id} value={item.itemId} onChange={(event)=>onChange({...item, itemId: event.target.value})} />\n                <Button style={{marginLeft: 100}} onClick={()=>onChange(item, true)} color=\"secondary\">Delete</Button>\n              </div>\n            </li>\n          })\n        }\n      </ul>\n  </div>\n}\n\nfunction SelectItem({id, value, onChange}){\n  const items = useSelector(selectItems);\n  const [open, setOpen] = useState(false);\n  const handleClose = ()=>setOpen(false);\n  const handleOpen = ()=>setOpen(true);\n  const handleChange = onChange;\n  return <div style={{display: 'inline-block'}}>\n    <InputLabel id={`select-${id}`}>Age</InputLabel>\n    <Select\n        labelId=\"demo-controlled-open-select-label\"\n        id=\"demo-controlled-open-select\"\n        open={open}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        value={value}\n        onChange={handleChange}\n      >\n      {Object.keys(items).map(itemId => {\n        const item = items[itemId];\n        return <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>\n      })}\n    </Select>\n  </div>\n}","import React, {useState} from 'react';\nimport { selectDays } from '../days/daySlice';\nimport { useSelector } from 'react-redux';\nimport { selectItems } from '../items/itemSlice';\nimport { daysOfWeek } from '../days/Days';\nimport { get } from 'lodash';\nimport { Chip } from '@material-ui/core';\n\nlet lastSlotId = null;\n\nconst soundUrl = 'http://soundbible.com/grab.php?id=2206&type=mp3';\nconst audio = new Audio(soundUrl);\n\nexport default function Schedule(){\n  let foundSlot = false;\n  const days = useSelector(selectDays);\n  const items = useSelector(selectItems);\n  const [ currentTime, setTime ] = useState(0);\n  setTimeout(()=>{\n    setTime(currentTime+1);\n  },1000)\n  const date = new Date();\n  const dayOfWeek = daysOfWeek[date.getDay()];\n  const day = days[dayOfWeek];\n  const orderedDays = [...day].sort((a, b)=>{\n    if(a.order > b.order) return 1;\n    if(a.order < b.order) return -1;\n    return 0;\n  });\n  const [daysWithStartTime] = orderedDays.reduce(([acc, prevTime], item)=>{\n    acc.push({ ...item, item: items[item.itemId], startTime: prevTime});\n    return [acc, prevTime + item.duration];\n  }, [[], 0]);\n  const elapsed = (date.getHours()  - 8) * 60 + date.getMinutes();\n  const slot = daysWithStartTime.find(i => {\n    return i.startTime <= elapsed && elapsed < (i.duration + i.startTime)\n  }, null);\n  if(lastSlotId){\n    if(slot && slot.id !== lastSlotId){\n      audio.play();\n      lastSlotId = slot.id;\n    }\n    if(!slot){\n      audio.play();\n      lastSlotId = null;\n    }\n  } else {\n    lastSlotId = get(slot, 'id', null);\n  }\n  return <div>\n  {\n    slot && <div style={{height: '100%', padding: 200, backgroundColor: slot.item.color}}>\n      <h1>{slot.item.name}</h1>\n    </div>\n  }\n    <div style={{\n      display: 'flex',\n      \"justify-content\": 'center',\n    \"flex-wrap\": 'wrap',\n    }}>\n      {daysWithStartTime.map(s => {\n        let color;\n        if(!slot){\n          color='secondary'\n        } else {\n          if(s.id === slot.id){\n            foundSlot = true;\n            color='primary'\n          } else if(!foundSlot){\n            color='secondary'\n          }\n        }\n        return <Chip color={color} label={get(s, 'item.name')} />\n      })}\n    </div>\n  </div>\n}","import React, { useState } from 'react';\r\nimport Items from './features/items/Items.js';\r\nimport Days, { a11yProps } from './features/days/Days.js';\r\nimport { Tabs, Tab } from '@material-ui/core';\r\nimport './App.css';\r\nimport TabPanel from './components/TabPanel';\r\nimport Schedule from './features/schedule/Schedule';\r\n\r\n\r\nfunction App() {\r\n  const [ tab, setTab ] = useState(\"schedule\");\r\n  return (\r\n    <div className=\"App\">\r\n      <Tabs value={tab} onChange={(event, newValue)=>{\r\n        console.log('newValue', newValue);\r\n        setTab(newValue)\r\n      }}>\r\n        <Tab label=\"Schedule\" {...a11yProps('schedule')} />\r\n        <Tab label=\"Items\" {...a11yProps('items')} />\r\n        <Tab label=\"Days\" {...a11yProps('days')} />\r\n        \r\n      </Tabs>\r\n      <TabPanel value={tab} index={'schedule'}>\r\n        <Schedule />\r\n      </TabPanel>\r\n      <TabPanel value={tab} index={'items'}>\r\n        <Items />\r\n      </TabPanel>\r\n      <TabPanel value={tab} index={'days'}>\r\n        <Days />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport itemReducer from '../features/items/itemSlice';\r\nimport dayReducer from '../features/days/daySlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    items: itemReducer,\r\n    days: dayReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}